---
name: Build and Deploy to Staging

concurrency:
  group: staging
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-staging]

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/rocky-linux/docs-builder:latest
    outputs:
      DOCS_SHA: ${{ steps.docs-sha.outputs.DOCS_SHA }}
    environment: staging
    steps:
      - name: Checkout mkdocs config
        uses: actions/checkout@v4

      - name: Checkout documentation repo
        uses: actions/checkout@v4
        with:
          repository: rocky-linux/documentation
          path: docs
          fetch-depth: 0

      - name: Set docs SHA
        id: docs-sha
        working-directory: docs
        run: echo "DOCS_SHA=$(git rev-parse --verify HEAD)" >> "$GITHUB_OUTPUT"

      - name: Cache mkdocs build
        uses: actions/cache@v4
        id: docs-cache
        with:
          path: build/minified
          key: cache-docs-staging-${{ steps.docs-sha.outputs.DOCS_SHA }}
          enableCrossOsArchive: true

      - name: Build Site
        if: steps.docs-cache.outputs.cache-hit != 'true'
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-minified-staging
          path: build/minified

  deploy:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/rocky-linux/docs-builder:latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore cached build
        uses: actions/cache/restore@v4
        id: docs-cache
        with:
          path: build/minified
          key: cache-docs-staging-${{ needs.build.outputs.DOCS_SHA }}
          fail-on-cache-miss: false
          enableCrossOsArchive: true

      - name: Retrieve build artifacts
        if: steps.docs-cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: build-minified-staging
          path: build/minified

      - name: Install Dependencies
        run: npm install
        working-directory: ./compute-js

      - name: Cache fastly compute package
        id: restore-fastly-cache
        uses: actions/cache@v4
        with:
          path: compute-js/pkg/*.tar.gz
          key: cache-fastly-staging-${{ needs.build.outputs.DOCS_SHA }}

      - name: Build Compute Package
        if: steps.restore-fastly-cache.outputs.cache-hit != 'true'
        run: npm run build
        working-directory: ./compute-js
        env:
          FASTLY_API_TOKEN: ${{ secrets.FASTLY_API_TOKEN }}

      - name: Publish to Staging Collection
        run: |
          npx @fastly/compute-js-static-publish publish-content \
            --collection-name=staging \
            --expires-in=7d \
            --config=./publish-content.config.js
        working-directory: ./compute-js
        env:
          FASTLY_API_TOKEN: ${{ secrets.FASTLY_API_TOKEN }}

      - name: Output staging info
        run: |
          echo "üöÄ Staging deployment completed!"
          echo "üìÑ Collection: staging"
          echo "‚è∞ Expires: 7 days"
          echo "üîó Access via your configured staging domain/collection selector"

  auto-promote:
    name: Auto-promote to Production
    needs: [build, deploy]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/rocky-linux/docs-builder:latest
    environment: production
    if: |
      (vars.AUTO_DEPLOY_STAGING == 'true') || 
      (github.event_name == 'repository_dispatch' && github.event.client_payload.auto_deploy == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install
        working-directory: ./compute-js

      - name: Auto-promote staging to production
        run: |
          echo "ü§ñ Auto-promoting staging to production..."
          npx @fastly/compute-js-static-publish collections promote \
            --collection-name=staging \
            --to=default \
            --expires-never
        working-directory: ./compute-js
        env:
          FASTLY_API_TOKEN: ${{ secrets.FASTLY_API_TOKEN }}

      - name: Output auto-promotion success
        run: |
          echo "üéâ Auto-promotion completed!"
          echo "üìÑ Staging ‚Üí Production (default collection)"
          echo "‚è∞ Expires: never"
          echo "üîó Live at: https://docs.rockylinux.org"